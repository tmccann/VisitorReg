import _extends from "@babel/runtime/helpers/esm/extends";
import cx from 'clsx';
import PropTypes from 'prop-types';
import * as React from 'react';
import { childrenUtils, createHTMLImage, customPropTypes, getComponentType, getUnhandledProps } from '../../lib';
import Icon from '../../elements/Icon';

/**
 * An event can contain an image or icon label.
 */
var FeedLabel = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var children = props.children,
    className = props.className,
    content = props.content,
    icon = props.icon,
    image = props.image;
  var classes = cx('label', className);
  var rest = getUnhandledProps(FeedLabel, props);
  var ElementType = getComponentType(props);
  if (!childrenUtils.isNil(children)) {
    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {
      className: classes,
      ref: ref
    }), children);
  }
  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {
    className: classes,
    ref: ref
  }), content, Icon.create(icon, {
    autoGenerateKey: false
  }), createHTMLImage(image));
});
FeedLabel.handledProps = ["as", "children", "className", "content", "icon", "image"];
FeedLabel.displayName = 'FeedLabel';
FeedLabel.propTypes = process.env.NODE_ENV !== "production" ? {
  /** An element type to render as (string or function). */
  as: PropTypes.elementType,
  /** Primary content. */
  children: PropTypes.node,
  /** Additional classes. */
  className: PropTypes.string,
  /** Shorthand for primary content. */
  content: customPropTypes.contentShorthand,
  /** An event can contain icon label. */
  icon: customPropTypes.itemShorthand,
  /** An event can contain image label. */
  image: customPropTypes.itemShorthand
} : {};
export default FeedLabel;