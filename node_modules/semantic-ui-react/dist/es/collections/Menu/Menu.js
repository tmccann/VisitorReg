"use client";

import _extends from "@babel/runtime/helpers/esm/extends";
import _without from "lodash-es/without";
import _invoke from "lodash-es/invoke";
import _map from "lodash-es/map";
import cx from 'clsx';
import PropTypes from 'prop-types';
import * as React from 'react';
import { childrenUtils, customPropTypes, createShorthandFactory, getComponentType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useValueAndKey, useWidthProp, useAutoControlledValue } from '../../lib';
import MenuHeader from './MenuHeader';
import MenuItem from './MenuItem';
import MenuMenu from './MenuMenu';

/**
 * A menu displays grouped navigation actions.
 * @see Dropdown
 */
var Menu = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var attached = props.attached,
    borderless = props.borderless,
    children = props.children,
    className = props.className,
    color = props.color,
    compact = props.compact,
    fixed = props.fixed,
    floated = props.floated,
    fluid = props.fluid,
    icon = props.icon,
    inverted = props.inverted,
    items = props.items,
    pagination = props.pagination,
    pointing = props.pointing,
    secondary = props.secondary,
    size = props.size,
    stackable = props.stackable,
    tabular = props.tabular,
    text = props.text,
    vertical = props.vertical,
    widths = props.widths;
  var _useAutoControlledVal = useAutoControlledValue({
      state: props.activeIndex,
      defaultState: props.defaultActiveIndex,
      initialState: -1
    }),
    activeIndex = _useAutoControlledVal[0],
    setActiveIndex = _useAutoControlledVal[1];
  var classes = cx('ui', color, size, useKeyOnly(borderless, 'borderless'), useKeyOnly(compact, 'compact'), useKeyOnly(fluid, 'fluid'), useKeyOnly(inverted, 'inverted'), useKeyOnly(pagination, 'pagination'), useKeyOnly(pointing, 'pointing'), useKeyOnly(secondary, 'secondary'), useKeyOnly(stackable, 'stackable'), useKeyOnly(text, 'text'), useKeyOnly(vertical, 'vertical'), useKeyOrValueAndKey(attached, 'attached'), useKeyOrValueAndKey(floated, 'floated'), useKeyOrValueAndKey(icon, 'icon'), useKeyOrValueAndKey(tabular, 'tabular'), useValueAndKey(fixed, 'fixed'), useWidthProp(widths, 'item'), className, 'menu');
  var rest = getUnhandledProps(Menu, props);
  var ElementType = getComponentType(props);
  if (!childrenUtils.isNil(children)) {
    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {
      className: classes,
      ref: ref
    }), children);
  }
  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {
    className: classes,
    ref: ref
  }), _map(items, function (item, index) {
    return MenuItem.create(item, {
      defaultProps: {
        active: parseInt(activeIndex, 10) === index,
        index: index
      },
      overrideProps: function overrideProps(predefinedProps) {
        return {
          onClick: function onClick(e, itemProps) {
            var itemIndex = itemProps.index;
            setActiveIndex(itemIndex);
            _invoke(predefinedProps, 'onClick', e, itemProps);
            _invoke(props, 'onItemClick', e, itemProps);
          }
        };
      }
    });
  }));
});
Menu.handledProps = ["activeIndex", "as", "attached", "borderless", "children", "className", "color", "compact", "defaultActiveIndex", "fixed", "floated", "fluid", "icon", "inverted", "items", "onItemClick", "pagination", "pointing", "secondary", "size", "stackable", "tabular", "text", "vertical", "widths"];
Menu.displayName = 'Menu';
Menu.propTypes = process.env.NODE_ENV !== "production" ? {
  /** An element type to render as (string or function). */
  as: PropTypes.elementType,
  /** Index of the currently active item. */
  activeIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  /** A menu may be attached to other content segments. */
  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),
  /** A menu item or menu can have no borders. */
  borderless: PropTypes.bool,
  /** Primary content. */
  children: PropTypes.node,
  /** Additional classes. */
  className: PropTypes.string,
  /** Additional colors can be specified. */
  color: PropTypes.oneOf(SUI.COLORS),
  /** A menu can take up only the space necessary to fit its content. */
  compact: PropTypes.bool,
  /** Initial activeIndex value. */
  defaultActiveIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  /** A menu can be fixed to a side of its context. */
  fixed: PropTypes.oneOf(['left', 'right', 'bottom', 'top']),
  /** A menu can be floated. */
  floated: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['right'])]),
  /** A vertical menu may take the size of its container. */
  fluid: PropTypes.bool,
  /** A menu may have just icons (bool) or labeled icons. */
  icon: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['labeled'])]),
  /** A menu may have its colors inverted to show greater contrast. */
  inverted: PropTypes.bool,
  /** Shorthand array of props for Menu. */
  items: customPropTypes.collectionShorthand,
  /**
   * onClick handler for MenuItem. Mutually exclusive with children.
   *
   * @param {SyntheticEvent} event - React's original SyntheticEvent.
   * @param {object} data - All item props.
   */
  onItemClick: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.func]),
  /** A pagination menu is specially formatted to present links to pages of content. */
  pagination: PropTypes.bool,
  /** A menu can point to show its relationship to nearby content. */
  pointing: PropTypes.bool,
  /** A menu can adjust its appearance to de-emphasize its contents. */
  secondary: PropTypes.bool,
  /** A menu can vary in size. */
  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium', 'big')),
  /** A menu can stack at mobile resolutions. */
  stackable: PropTypes.bool,
  /** A menu can be formatted to show tabs of information. */
  tabular: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['right'])]),
  /** A menu can be formatted for text content. */
  text: PropTypes.bool,
  /** A vertical menu displays elements vertically. */
  vertical: PropTypes.bool,
  /** A menu can have its items divided evenly. */
  widths: PropTypes.oneOf(SUI.WIDTHS)
} : {};
Menu.Header = MenuHeader;
Menu.Item = MenuItem;
Menu.Menu = MenuMenu;
Menu.create = createShorthandFactory(Menu, function (items) {
  return {
    items: items
  };
});
export default Menu;